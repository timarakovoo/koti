import os
import random
import json
import requests
from io import BytesIO
from flask import Flask, request
import telebot
from telebot.types import Update

BOT_TOKEN = os.getenv("7798488343:AAHUeygP3dJLCy4ynNajG4tFfGurFhYDVPE")
WEBHOOK_URL = os.getenv("https://dashboard.render.com/project/prj-d17ke3ndiees7387kff0")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"
user_collections = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, "r") as f:
        user_collections = json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    with open(DATA_FILE, "w") as f:
        json.dump(user_collections, f)

def rarity_stars(rarity):
    return "‚≠ê" * rarity

def generate_kitten():
    kitten_id = random.randint(100000, 999999)
    image_url = f"https://cataas.com/cat?width=300&height=300&uniq={kitten_id}"
    roll = random.randint(1, 100)
    rarity = 5 if roll <= 5 else 4 if roll <= 30 else 3
    return {"id": kitten_id, "url": image_url, "rarity": rarity}

def is_subscribed(user_id):
    try:
        member = bot.get_chat_member("@freekittens", user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏]: {e}")
        return False

@bot.message_handler(commands=['start', 'help'])
def start(message):
    welcome = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –∫–∞–∑–∏–∫ –∫–æ—Ç—è—Ç, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –≤—Å–ø–∞—Ç—ã—à–µ–π!\n\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: (–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @freekittens)\n"
        "üê± /cat ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º—è–≥–∫–æ–≥–æ –∏ –≤—Å—Ä–∞—Ç–æ–≥–æ\n"
        "üìñ /collection ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é\n"
        "üèÜ /top ‚Äî —Ç–æ–ø –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤\n"
        "‚ÑπÔ∏è /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )
    bot.send_message(message.chat.id, welcome)

@bot.message_handler(commands=['cat'])
def send_cat(message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        bot.send_message(message.chat.id, "üìõ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @freekittens, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∫–æ—Ç—è—Ç!")
        return

    kitten = generate_kitten()
    user_collections.setdefault(str(user_id), [])

    already_has = kitten["id"] in user_collections[str(user_id)]
    if not already_has:
        user_collections[str(user_id)].append(kitten["id"])
        save_data()

    caption = f"{rarity_stars(kitten['rarity'])} –ö–æ—Ç—ë–Ω–æ–∫ ‚Ññ{kitten['id']}\n"
    caption += "–¢—ã —É–∂–µ –≤–∏–¥–µ–ª –µ–≥–æ!" if already_has else "–î–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é!"

    try:
        response = requests.get(kitten["url"])
        response.raise_for_status()
        photo = BytesIO(response.content)
        photo.name = "kitten.jpg"
        bot.send_photo(message.chat.id, photo, caption=caption)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e)
        bot.send_message(message.chat.id, "üòø –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ç—ë–Ω–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@bot.message_handler(commands=['collection'])
def collection(message):
    user_id = message.from_user.id
    if not is_subscribed(user_id):
        bot.send_message(message.chat.id, "üìõ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ @freekittens, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é!")
        return

    collection = user_collections.get(str(user_id), [])
    if not collection:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ—Ç—è—Ç üòø –ù–∞–ø–∏—à–∏ /cat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!")
        return

    response = f"üêæ –£ —Ç–µ–±—è {len(collection)} –∫–æ—Ç—è—Ç!\n–ö–∞–∂–¥—ã–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ —Ä–µ–¥–∫–æ—Å—Ç—å—é."
    bot.send_message(message.chat.id, response)

@bot.message_handler(commands=['top'])
def top(message):
    if not user_collections:
        bot.send_message(message.chat.id, "–¢–æ–ø –ø–æ–∫–∞ –ø—É—Å—Ç ü´•")
        return

    sorted_top = sorted(user_collections.items(), key=lambda x: len(x[1]), reverse=True)
    text = "üèÜ –¢–æ–ø –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤:\n"
    for i, (uid, kittens) in enumerate(sorted_top[:5], start=1):
        try:
            user = bot.get_chat(int(uid))
            name = user.first_name or f"User {uid}"
        except:
            name = f"User {uid}"
        text += f"{i}. {name} ‚Äî {len(kittens)} –∫–æ—Ç—è—Ç\n"

    bot.send_message(message.chat.id, text)

@bot.message_handler(commands=['broadcast'])
def broadcast_command(message):
    if message.from_user.username != "saygexteam":
        bot.reply_to(message, "‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    msg = bot.reply_to(message, "‚úèÔ∏è –í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, send_broadcast)

def send_broadcast(message):
    if message.from_user.username != "saygexteam":
        return
    count = 0
    for uid in user_collections:
        try:
            bot.send_message(int(uid), f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞:\n{message.text}")
            count += 1
        except:
            continue
    bot.send_message(message.chat.id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# üåê Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.route('/', methods=['GET'])
def index():
    return "–±–æ—Ç –∂–∏–≤!"

@app.route(f'/{BOT_TOKEN}', methods=['POST'])
def webhook():
    update = Update.de_json(request.stream.read().decode("utf-8"))
    bot.process_new_updates([update])
    return "ok", 200

# üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
if __name__ == "__main__":
    bot.remove_webhook()
    bot.set_webhook(url=f"{WEBHOOK_URL}/{BOT_TOKEN}")
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
